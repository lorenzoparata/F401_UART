
F401_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003078  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003224  08003224  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800322c  0800322c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000068  0800329c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  0800329c  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090e9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001879  00000000  00000000  000291c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0002aa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a8  00000000  00000000  0002b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001600a  00000000  00000000  0002b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000922a  00000000  00000000  00041762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086fc9  00000000  00000000  0004a98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000220c  00000000  00000000  000d1958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000d3b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080031f4 	.word	0x080031f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	080031f4 	.word	0x080031f4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b970 	b.w	80004dc <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	460f      	mov	r7, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4694      	mov	ip, r2
 8000228:	d965      	bls.n	80002f6 <__udivmoddi4+0xe2>
 800022a:	fab2 f382 	clz	r3, r2
 800022e:	b143      	cbz	r3, 8000242 <__udivmoddi4+0x2e>
 8000230:	fa02 fc03 	lsl.w	ip, r2, r3
 8000234:	f1c3 0220 	rsb	r2, r3, #32
 8000238:	409f      	lsls	r7, r3
 800023a:	fa20 f202 	lsr.w	r2, r0, r2
 800023e:	4317      	orrs	r7, r2
 8000240:	409c      	lsls	r4, r3
 8000242:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000246:	fa1f f58c 	uxth.w	r5, ip
 800024a:	fbb7 f1fe 	udiv	r1, r7, lr
 800024e:	0c22      	lsrs	r2, r4, #16
 8000250:	fb0e 7711 	mls	r7, lr, r1, r7
 8000254:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000258:	fb01 f005 	mul.w	r0, r1, r5
 800025c:	4290      	cmp	r0, r2
 800025e:	d90a      	bls.n	8000276 <__udivmoddi4+0x62>
 8000260:	eb1c 0202 	adds.w	r2, ip, r2
 8000264:	f101 37ff 	add.w	r7, r1, #4294967295
 8000268:	f080 811c 	bcs.w	80004a4 <__udivmoddi4+0x290>
 800026c:	4290      	cmp	r0, r2
 800026e:	f240 8119 	bls.w	80004a4 <__udivmoddi4+0x290>
 8000272:	3902      	subs	r1, #2
 8000274:	4462      	add	r2, ip
 8000276:	1a12      	subs	r2, r2, r0
 8000278:	b2a4      	uxth	r4, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000286:	fb00 f505 	mul.w	r5, r0, r5
 800028a:	42a5      	cmp	r5, r4
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x90>
 800028e:	eb1c 0404 	adds.w	r4, ip, r4
 8000292:	f100 32ff 	add.w	r2, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x294>
 800029a:	42a5      	cmp	r5, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x294>
 80002a0:	4464      	add	r4, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a8:	1b64      	subs	r4, r4, r5
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11e      	cbz	r6, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40dc      	lsrs	r4, r3
 80002b0:	2300      	movs	r3, #0
 80002b2:	e9c6 4300 	strd	r4, r3, [r6]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0xbc>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80ed 	beq.w	800049e <__udivmoddi4+0x28a>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	d149      	bne.n	800036c <__udivmoddi4+0x158>
 80002d8:	42ab      	cmp	r3, r5
 80002da:	d302      	bcc.n	80002e2 <__udivmoddi4+0xce>
 80002dc:	4282      	cmp	r2, r0
 80002de:	f200 80f8 	bhi.w	80004d2 <__udivmoddi4+0x2be>
 80002e2:	1a84      	subs	r4, r0, r2
 80002e4:	eb65 0203 	sbc.w	r2, r5, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	4617      	mov	r7, r2
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d0e2      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	e9c6 4700 	strd	r4, r7, [r6]
 80002f4:	e7df      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xe6>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x210>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2101      	movs	r1, #1
 8000310:	fbb2 f5f7 	udiv	r5, r2, r7
 8000314:	fb07 2015 	mls	r0, r7, r5, r2
 8000318:	0c22      	lsrs	r2, r4, #16
 800031a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031e:	fb0e f005 	mul.w	r0, lr, r5
 8000322:	4290      	cmp	r0, r2
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x124>
 8000326:	eb1c 0202 	adds.w	r2, ip, r2
 800032a:	f105 38ff 	add.w	r8, r5, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4290      	cmp	r0, r2
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2b8>
 8000336:	4645      	mov	r5, r8
 8000338:	1a12      	subs	r2, r2, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000340:	fb07 2210 	mls	r2, r7, r0, r2
 8000344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x14e>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x14c>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2c2>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036a:	e79f      	b.n	80002ac <__udivmoddi4+0x98>
 800036c:	f1c1 0720 	rsb	r7, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa05 f401 	lsl.w	r4, r5, r1
 800037e:	fa20 f307 	lsr.w	r3, r0, r7
 8000382:	40fd      	lsrs	r5, r7
 8000384:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	fa1f fe8c 	uxth.w	lr, ip
 8000392:	fb09 5518 	mls	r5, r9, r8, r5
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb08 f50e 	mul.w	r5, r8, lr
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	fa00 f001 	lsl.w	r0, r0, r1
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2b4>
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2b4>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	b29d      	uxth	r5, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2ac>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2ac>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	4464      	add	r4, ip
 80003ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f2:	fba3 9502 	umull	r9, r5, r3, r2
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46ae      	mov	lr, r5
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x29c>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x298>
 8000404:	b156      	cbz	r6, 800041c <__udivmoddi4+0x208>
 8000406:	ebb0 0208 	subs.w	r2, r0, r8
 800040a:	eb64 040e 	sbc.w	r4, r4, lr
 800040e:	fa04 f707 	lsl.w	r7, r4, r7
 8000412:	40ca      	lsrs	r2, r1
 8000414:	40cc      	lsrs	r4, r1
 8000416:	4317      	orrs	r7, r2
 8000418:	e9c6 7400 	strd	r7, r4, [r6]
 800041c:	4618      	mov	r0, r3
 800041e:	2100      	movs	r1, #0
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	f1c3 0120 	rsb	r1, r3, #32
 8000428:	fa02 fc03 	lsl.w	ip, r2, r3
 800042c:	fa20 f201 	lsr.w	r2, r0, r1
 8000430:	fa25 f101 	lsr.w	r1, r5, r1
 8000434:	409d      	lsls	r5, r3
 8000436:	432a      	orrs	r2, r5
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1510 	mls	r5, r7, r0, r1
 8000448:	0c11      	lsrs	r1, r2, #16
 800044a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044e:	fb00 f50e 	mul.w	r5, r0, lr
 8000452:	428d      	cmp	r5, r1
 8000454:	fa04 f403 	lsl.w	r4, r4, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x258>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000464:	428d      	cmp	r5, r1
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 8000468:	3802      	subs	r0, #2
 800046a:	4461      	add	r1, ip
 800046c:	1b49      	subs	r1, r1, r5
 800046e:	b292      	uxth	r2, r2
 8000470:	fbb1 f5f7 	udiv	r5, r1, r7
 8000474:	fb07 1115 	mls	r1, r7, r5, r1
 8000478:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800047c:	fb05 f10e 	mul.w	r1, r5, lr
 8000480:	4291      	cmp	r1, r2
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x282>
 8000484:	eb1c 0202 	adds.w	r2, ip, r2
 8000488:	f105 38ff 	add.w	r8, r5, #4294967295
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800048e:	4291      	cmp	r1, r2
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2a8>
 8000492:	3d02      	subs	r5, #2
 8000494:	4462      	add	r2, ip
 8000496:	1a52      	subs	r2, r2, r1
 8000498:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0xfc>
 800049e:	4631      	mov	r1, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e708      	b.n	80002b6 <__udivmoddi4+0xa2>
 80004a4:	4639      	mov	r1, r7
 80004a6:	e6e6      	b.n	8000276 <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x90>
 80004ac:	4548      	cmp	r0, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b8:	3b01      	subs	r3, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004bc:	4645      	mov	r5, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x282>
 80004c0:	462b      	mov	r3, r5
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x258>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x124>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e70a      	b.n	80002ec <__udivmoddi4+0xd8>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x14e>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fafc 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f822 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8e0 	bl	80006b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f8b4 	bl	800065c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f888 	bl	8000608 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <main+0x44>)
 8000500:	f000 feac 	bl	800125c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if((HAL_UART_Receive_IT(&huart1,(uint8_t*)uart1_buf,buf_size))==HAL_OK)
 8000504:	22b4      	movs	r2, #180	; 0xb4
 8000506:	4908      	ldr	r1, [pc, #32]	; (8000528 <main+0x48>)
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0x4c>)
 800050a:	f001 fc58 	bl	8001dbe <HAL_UART_Receive_IT>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d102      	bne.n	800051a <main+0x3a>
	{
	  GNSS_PRINT(uart1_buf);
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <main+0x48>)
 8000516:	f000 f943 	bl	80007a0 <GNSS_PRINT>
	}
	HAL_Delay(200);
 800051a:	20c8      	movs	r0, #200	; 0xc8
 800051c:	f000 fb52 	bl	8000bc4 <HAL_Delay>
	if((HAL_UART_Receive_IT(&huart1,(uint8_t*)uart1_buf,buf_size))==HAL_OK)
 8000520:	e7f0      	b.n	8000504 <main+0x24>
 8000522:	bf00      	nop
 8000524:	40020000 	.word	0x40020000
 8000528:	20000114 	.word	0x20000114
 800052c:	20000084 	.word	0x20000084

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fd89 	bl	8003056 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b29      	ldr	r3, [pc, #164]	; (8000600 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a28      	ldr	r2, [pc, #160]	; (8000600 <SystemClock_Config+0xd0>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <SystemClock_Config+0xd0>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <SystemClock_Config+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd4>)
 800057e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a4:	2310      	movs	r3, #16
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fe8c 	bl	80012d8 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c6:	f000 f90f 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2102      	movs	r1, #2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 f8ee 	bl	80017c8 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005f2:	f000 f8f9 	bl	80007e8 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_USART1_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000640:	f001 fae2 	bl	8001c08 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800064a:	f000 f8cd 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000084 	.word	0x20000084
 8000658:	40011000 	.word	0x40011000

0800065c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_USART2_UART_Init+0x50>)
 8000664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_USART2_UART_Init+0x4c>)
 8000694:	f001 fab8 	bl	8001c08 <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800069e:	f000 f8a3 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000cc 	.word	0x200000cc
 80006ac:	40004400 	.word	0x40004400

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <MX_GPIO_Init+0xe4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a31      	ldr	r2, [pc, #196]	; (8000794 <MX_GPIO_Init+0xe4>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <MX_GPIO_Init+0xe4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_GPIO_Init+0xe4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a2a      	ldr	r2, [pc, #168]	; (8000794 <MX_GPIO_Init+0xe4>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_GPIO_Init+0xe4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_GPIO_Init+0xe4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a23      	ldr	r2, [pc, #140]	; (8000794 <MX_GPIO_Init+0xe4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_GPIO_Init+0xe4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_GPIO_Init+0xe4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_GPIO_Init+0xe4>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_GPIO_Init+0xe4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 7190 	mov.w	r1, #288	; 0x120
 800073c:	4816      	ldr	r0, [pc, #88]	; (8000798 <MX_GPIO_Init+0xe8>)
 800073e:	f000 fd8d 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000748:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	4810      	ldr	r0, [pc, #64]	; (800079c <MX_GPIO_Init+0xec>)
 800075a:	f000 fbfb 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 800075e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <MX_GPIO_Init+0xe8>)
 8000778:	f000 fbec 	bl	8000f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	2028      	movs	r0, #40	; 0x28
 8000782:	f000 fb1e 	bl	8000dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000786:	2028      	movs	r0, #40	; 0x28
 8000788:	f000 fb37 	bl	8000dfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020000 	.word	0x40020000
 800079c:	40020800 	.word	0x40020800

080007a0 <GNSS_PRINT>:

/* USER CODE BEGIN 4 */
int GNSS_PRINT(char *pBuffer)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart2, (uint8_t*)pBuffer, (uint16_t)strlen((char *)pBuffer), 1000) != HAL_OK)
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff fd13 	bl	80001d4 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <GNSS_PRINT+0x40>)
 80007ba:	f001 fa75 	bl	8001ca8 <HAL_UART_Transmit>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <GNSS_PRINT+0x28>
  {
    return 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e006      	b.n	80007d6 <GNSS_PRINT+0x36>
  }
  fflush(stdout);
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <GNSS_PRINT+0x44>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fb28 	bl	8002e24 <fflush>

  return 0;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000cc 	.word	0x200000cc
 80007e4:	20000064 	.word	0x20000064

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000832:	2007      	movs	r0, #7
 8000834:	f000 faba 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a36      	ldr	r2, [pc, #216]	; (800093c <HAL_UART_MspInit+0xf8>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d135      	bne.n	80008d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <HAL_UART_MspInit+0xfc>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a34      	ldr	r2, [pc, #208]	; (8000940 <HAL_UART_MspInit+0xfc>)
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <HAL_UART_MspInit+0xfc>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f003 0310 	and.w	r3, r3, #16
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <HAL_UART_MspInit+0xfc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a2d      	ldr	r2, [pc, #180]	; (8000940 <HAL_UART_MspInit+0xfc>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <HAL_UART_MspInit+0xfc>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800089e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008b0:	2307      	movs	r3, #7
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4822      	ldr	r0, [pc, #136]	; (8000944 <HAL_UART_MspInit+0x100>)
 80008bc:	f000 fb4a 	bl	8000f54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2025      	movs	r0, #37	; 0x25
 80008c6:	f000 fa7c 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008ca:	2025      	movs	r0, #37	; 0x25
 80008cc:	f000 fa95 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d0:	e030      	b.n	8000934 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <HAL_UART_MspInit+0x104>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d12b      	bne.n	8000934 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_UART_MspInit+0xfc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <HAL_UART_MspInit+0xfc>)
 80008e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_UART_MspInit+0xfc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_UART_MspInit+0xfc>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_UART_MspInit+0xfc>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6313      	str	r3, [r2, #48]	; 0x30
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_UART_MspInit+0xfc>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000914:	230c      	movs	r3, #12
 8000916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000924:	2307      	movs	r3, #7
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_UART_MspInit+0x100>)
 8000930:	f000 fb10 	bl	8000f54 <HAL_GPIO_Init>
}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	; 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40011000 	.word	0x40011000
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000
 8000948:	40004400 	.word	0x40004400

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f8f4 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <USART1_IRQHandler+0x10>)
 80009a6:	f001 fa2f 	bl	8001e08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000084 	.word	0x20000084

080009b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009bc:	f000 fc68 	bl	8001290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e00a      	b.n	80009ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d6:	f3af 8000 	nop.w
 80009da:	4601      	mov	r1, r0
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	60ba      	str	r2, [r7, #8]
 80009e2:	b2ca      	uxtb	r2, r1
 80009e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3301      	adds	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbf0      	blt.n	80009d6 <_read+0x12>
  }

  return len;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	e009      	b.n	8000a24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60ba      	str	r2, [r7, #8]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf1      	blt.n	8000a10 <_write+0x12>
  }
  return len;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_close>:

int _close(int file)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a90:	f7ff ffea 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000aba:	f002 fb1b 	bl	80030f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000abe:	f7ff fd0f 	bl	80004e0 <main>
  bx  lr    
 8000ac2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ad0:	08003234 	.word	0x08003234
  ldr r2, =_sbss
 8000ad4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ad8:	20000314 	.word	0x20000314

08000adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_Init+0x40>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_Init+0x40>)
 8000af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x40>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f94f 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fe6e 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023c00 	.word	0x40023c00

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f967 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f92f 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000004 	.word	0x20000004

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200001c8 	.word	0x200001c8

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200001c8 	.word	0x200001c8

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff ffee 	bl	8000bac <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffde 	bl	8000bac <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff29 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff3e 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff31 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffa2 	bl	8000d68 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff feb6 	bl	8000bac <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d008      	beq.n	8000e60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e052      	b.n	8000f06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0216 	bic.w	r2, r2, #22
 8000e6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d103      	bne.n	8000e90 <HAL_DMA_Abort+0x62>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0208 	bic.w	r2, r2, #8
 8000e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb0:	e013      	b.n	8000eda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eb2:	f7ff fe7b 	bl	8000bac <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d90c      	bls.n	8000eda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e015      	b.n	8000f06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1e4      	bne.n	8000eb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eec:	223f      	movs	r2, #63	; 0x3f
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d004      	beq.n	8000f2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e00c      	b.n	8000f46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2205      	movs	r2, #5
 8000f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e159      	b.n	8001224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8148 	bne.w	800121e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a2 	beq.w	800121e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a56      	ldr	r2, [pc, #344]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b54      	ldr	r3, [pc, #336]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a52      	ldr	r2, [pc, #328]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a49      	ldr	r2, [pc, #292]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x202>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a48      	ldr	r2, [pc, #288]	; (8001248 <HAL_GPIO_Init+0x2f4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x1fe>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a47      	ldr	r2, [pc, #284]	; (800124c <HAL_GPIO_Init+0x2f8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x1fa>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a46      	ldr	r2, [pc, #280]	; (8001250 <HAL_GPIO_Init+0x2fc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x1f6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a45      	ldr	r2, [pc, #276]	; (8001254 <HAL_GPIO_Init+0x300>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x1f2>
 8001142:	2304      	movs	r3, #4
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001146:	2307      	movs	r3, #7
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_GPIO_Init+0x304>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x304>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a24      	ldr	r2, [pc, #144]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_GPIO_Init+0x304>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f aea2 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800129c:	695a      	ldr	r2, [r3, #20]
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f806 	bl	80012c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40013c00 	.word	0x40013c00

080012c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e267      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d075      	beq.n	80013e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d00c      	beq.n	800131c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001302:	4b85      	ldr	r3, [pc, #532]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130a:	2b08      	cmp	r3, #8
 800130c:	d112      	bne.n	8001334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130e:	4b82      	ldr	r3, [pc, #520]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800131a:	d10b      	bne.n	8001334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	4b7e      	ldr	r3, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d05b      	beq.n	80013e0 <HAL_RCC_OscConfig+0x108>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d157      	bne.n	80013e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e242      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133c:	d106      	bne.n	800134c <HAL_RCC_OscConfig+0x74>
 800133e:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a75      	ldr	r2, [pc, #468]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e01d      	b.n	8001388 <HAL_RCC_OscConfig+0xb0>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x98>
 8001356:	4b70      	ldr	r3, [pc, #448]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a6f      	ldr	r2, [pc, #444]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800135c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a6c      	ldr	r2, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e00b      	b.n	8001388 <HAL_RCC_OscConfig+0xb0>
 8001370:	4b69      	ldr	r3, [pc, #420]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a68      	ldr	r2, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b66      	ldr	r3, [pc, #408]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a65      	ldr	r2, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d013      	beq.n	80013b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fc0c 	bl	8000bac <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fc08 	bl	8000bac <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e207      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0xc0>
 80013b6:	e014      	b.n	80013e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fbf8 	bl	8000bac <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fbf4 	bl	8000bac <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1f3      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0xe8>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d063      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001402:	2b08      	cmp	r3, #8
 8001404:	d11c      	bne.n	8001440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001406:	4b44      	ldr	r3, [pc, #272]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d116      	bne.n	8001440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x152>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d001      	beq.n	800142a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e1c7      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142a:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4937      	ldr	r1, [pc, #220]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	e03a      	b.n	80014b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d020      	beq.n	800148a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001448:	4b34      	ldr	r3, [pc, #208]	; (800151c <HAL_RCC_OscConfig+0x244>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144e:	f7ff fbad 	bl	8000bac <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fba9 	bl	8000bac <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e1a8      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4925      	ldr	r1, [pc, #148]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
 8001488:	e015      	b.n	80014b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <HAL_RCC_OscConfig+0x244>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fb8c 	bl	8000bac <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff fb88 	bl	8000bac <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e187      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d036      	beq.n	8001530 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d016      	beq.n	80014f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_RCC_OscConfig+0x248>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d0:	f7ff fb6c 	bl	8000bac <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fb68 	bl	8000bac <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e167      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80014ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x200>
 80014f6:	e01b      	b.n	8001530 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_RCC_OscConfig+0x248>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb55 	bl	8000bac <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	e00e      	b.n	8001524 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fb51 	bl	8000bac <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d907      	bls.n	8001524 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e150      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
 8001518:	40023800 	.word	0x40023800
 800151c:	42470000 	.word	0x42470000
 8001520:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1ea      	bne.n	8001506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8097 	beq.w	800166c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001542:	4b81      	ldr	r3, [pc, #516]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10f      	bne.n	800156e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a7c      	ldr	r2, [pc, #496]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156a:	2301      	movs	r3, #1
 800156c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	4b77      	ldr	r3, [pc, #476]	; (800174c <HAL_RCC_OscConfig+0x474>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d118      	bne.n	80015ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800157a:	4b74      	ldr	r3, [pc, #464]	; (800174c <HAL_RCC_OscConfig+0x474>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a73      	ldr	r2, [pc, #460]	; (800174c <HAL_RCC_OscConfig+0x474>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001586:	f7ff fb11 	bl	8000bac <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff fb0d 	bl	8000bac <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e10c      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	4b6a      	ldr	r3, [pc, #424]	; (800174c <HAL_RCC_OscConfig+0x474>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x2ea>
 80015b4:	4b64      	ldr	r3, [pc, #400]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a63      	ldr	r2, [pc, #396]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	e01c      	b.n	80015fc <HAL_RCC_OscConfig+0x324>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x30c>
 80015ca:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a5e      	ldr	r2, [pc, #376]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
 80015d6:	4b5c      	ldr	r3, [pc, #368]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a5b      	ldr	r2, [pc, #364]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0x324>
 80015e4:	4b58      	ldr	r3, [pc, #352]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	4a57      	ldr	r2, [pc, #348]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	6713      	str	r3, [r2, #112]	; 0x70
 80015f0:	4b55      	ldr	r3, [pc, #340]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	4a54      	ldr	r2, [pc, #336]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015f6:	f023 0304 	bic.w	r3, r3, #4
 80015fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d015      	beq.n	8001630 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fad2 	bl	8000bac <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160a:	e00a      	b.n	8001622 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff face 	bl	8000bac <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0cb      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001622:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0ee      	beq.n	800160c <HAL_RCC_OscConfig+0x334>
 800162e:	e014      	b.n	800165a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fabc 	bl	8000bac <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001636:	e00a      	b.n	800164e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001638:	f7ff fab8 	bl	8000bac <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e0b5      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164e:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ee      	bne.n	8001638 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001660:	4b39      	ldr	r3, [pc, #228]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	4a38      	ldr	r2, [pc, #224]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800166a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80a1 	beq.w	80017b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d05c      	beq.n	800173c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d141      	bne.n	800170e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_RCC_OscConfig+0x478>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fa8c 	bl	8000bac <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fa88 	bl	8000bac <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e087      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	019b      	lsls	r3, r3, #6
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	3b01      	subs	r3, #1
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	491b      	ldr	r1, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_RCC_OscConfig+0x478>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fa61 	bl	8000bac <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fa5d 	bl	8000bac <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e05c      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x416>
 800170c:	e054      	b.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_RCC_OscConfig+0x478>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fa4a 	bl	8000bac <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff fa46 	bl	8000bac <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e045      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x444>
 800173a:	e03d      	b.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e038      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000
 8001750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x4ec>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d028      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d121      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d11a      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800178a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800178c:	4293      	cmp	r3, r2
 800178e:	d111      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	3b01      	subs	r3, #1
 800179e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0cc      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017dc:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d90c      	bls.n	8001804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b65      	ldr	r3, [pc, #404]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b63      	ldr	r3, [pc, #396]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0b8      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800181c:	4b59      	ldr	r3, [pc, #356]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a58      	ldr	r2, [pc, #352]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001834:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800183e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b50      	ldr	r3, [pc, #320]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	494d      	ldr	r1, [pc, #308]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d044      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d119      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e07f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d003      	beq.n	8001886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001882:	2b03      	cmp	r3, #3
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e06f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e067      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f023 0203 	bic.w	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4934      	ldr	r1, [pc, #208]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b8:	f7ff f978 	bl	8000bac <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c0:	f7ff f974 	bl	8000bac <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e04f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 020c 	and.w	r2, r3, #12
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d1eb      	bne.n	80018c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d20c      	bcs.n	8001910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e032      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4916      	ldr	r1, [pc, #88]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	490e      	ldr	r1, [pc, #56]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800194e:	f000 f821 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8001952:	4602      	mov	r2, r0
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	490a      	ldr	r1, [pc, #40]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	5ccb      	ldrb	r3, [r1, r3]
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f8d8 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023c00 	.word	0x40023c00
 8001984:	40023800 	.word	0x40023800
 8001988:	0800320c 	.word	0x0800320c
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001998:	b094      	sub	sp, #80	; 0x50
 800199a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
 80019a0:	2300      	movs	r3, #0
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019a4:	2300      	movs	r3, #0
 80019a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ac:	4b79      	ldr	r3, [pc, #484]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d00d      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x40>
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	f200 80e1 	bhi.w	8001b80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x34>
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x3a>
 80019c6:	e0db      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b73      	ldr	r3, [pc, #460]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019cc:	e0db      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ce:	4b73      	ldr	r3, [pc, #460]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x208>)
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019d2:	e0d8      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d4:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019de:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d063      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ea:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	099b      	lsrs	r3, r3, #6
 80019f0:	2200      	movs	r2, #0
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
 8001a02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a06:	4622      	mov	r2, r4
 8001a08:	462b      	mov	r3, r5
 8001a0a:	f04f 0000 	mov.w	r0, #0
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	0159      	lsls	r1, r3, #5
 8001a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a18:	0150      	lsls	r0, r2, #5
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4621      	mov	r1, r4
 8001a20:	1a51      	subs	r1, r2, r1
 8001a22:	6139      	str	r1, [r7, #16]
 8001a24:	4629      	mov	r1, r5
 8001a26:	eb63 0301 	sbc.w	r3, r3, r1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a38:	4659      	mov	r1, fp
 8001a3a:	018b      	lsls	r3, r1, #6
 8001a3c:	4651      	mov	r1, sl
 8001a3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a42:	4651      	mov	r1, sl
 8001a44:	018a      	lsls	r2, r1, #6
 8001a46:	4651      	mov	r1, sl
 8001a48:	ebb2 0801 	subs.w	r8, r2, r1
 8001a4c:	4659      	mov	r1, fp
 8001a4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a66:	4690      	mov	r8, r2
 8001a68:	4699      	mov	r9, r3
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	eb18 0303 	adds.w	r3, r8, r3
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	462b      	mov	r3, r5
 8001a74:	eb49 0303 	adc.w	r3, r9, r3
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a86:	4629      	mov	r1, r5
 8001a88:	024b      	lsls	r3, r1, #9
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a90:	4621      	mov	r1, r4
 8001a92:	024a      	lsls	r2, r1, #9
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001aa4:	f7fe fb9e 	bl	80001e4 <__aeabi_uldivmod>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4613      	mov	r3, r2
 8001aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ab0:	e058      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab2:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	099b      	lsrs	r3, r3, #6
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	4611      	mov	r1, r2
 8001abe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001acc:	4642      	mov	r2, r8
 8001ace:	464b      	mov	r3, r9
 8001ad0:	f04f 0000 	mov.w	r0, #0
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	0159      	lsls	r1, r3, #5
 8001ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ade:	0150      	lsls	r0, r2, #5
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4641      	mov	r1, r8
 8001ae6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aea:	4649      	mov	r1, r9
 8001aec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001afc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b04:	ebb2 040a 	subs.w	r4, r2, sl
 8001b08:	eb63 050b 	sbc.w	r5, r3, fp
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	00eb      	lsls	r3, r5, #3
 8001b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b1a:	00e2      	lsls	r2, r4, #3
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	461d      	mov	r5, r3
 8001b20:	4643      	mov	r3, r8
 8001b22:	18e3      	adds	r3, r4, r3
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	464b      	mov	r3, r9
 8001b28:	eb45 0303 	adc.w	r3, r5, r3
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	028b      	lsls	r3, r1, #10
 8001b3e:	4621      	mov	r1, r4
 8001b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b44:	4621      	mov	r1, r4
 8001b46:	028a      	lsls	r2, r1, #10
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	61fa      	str	r2, [r7, #28]
 8001b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b58:	f7fe fb44 	bl	80001e4 <__aeabi_uldivmod>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4613      	mov	r3, r2
 8001b62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	0c1b      	lsrs	r3, r3, #16
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b7e:	e002      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3750      	adds	r7, #80	; 0x50
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	00f42400 	.word	0x00f42400
 8001b9c:	007a1200 	.word	0x007a1200

08001ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bbc:	f7ff fff0 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	4903      	ldr	r1, [pc, #12]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	0800321c 	.word	0x0800321c

08001be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001be4:	f7ff ffdc 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0b5b      	lsrs	r3, r3, #13
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4903      	ldr	r1, [pc, #12]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	0800321c 	.word	0x0800321c

08001c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e042      	b.n	8001ca0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fe08 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2224      	movs	r2, #36	; 0x24
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fdc7 	bl	80027e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d175      	bne.n	8001db4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_UART_Transmit+0x2c>
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e06e      	b.n	8001db6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2221      	movs	r2, #33	; 0x21
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ce6:	f7fe ff61 	bl	8000bac <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d00:	d108      	bne.n	8001d14 <HAL_UART_Transmit+0x6c>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d104      	bne.n	8001d14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	e003      	b.n	8001d1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d1c:	e02e      	b.n	8001d7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2200      	movs	r2, #0
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fb29 	bl	8002380 <UART_WaitOnFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e03a      	b.n	8001db6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10b      	bne.n	8001d5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3302      	adds	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	e007      	b.n	8001d6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1cb      	bne.n	8001d1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 faf5 	bl	8002380 <UART_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e006      	b.n	8001db6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e000      	b.n	8001db6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001db4:	2302      	movs	r3, #2
  }
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3720      	adds	r7, #32
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d112      	bne.n	8001dfe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_UART_Receive_IT+0x26>
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e00b      	b.n	8001e00 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	461a      	mov	r2, r3
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fb1c 	bl	8002432 <UART_Start_Receive_IT>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	e000      	b.n	8001e00 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0ba      	sub	sp, #232	; 0xe8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10f      	bne.n	8001e6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <HAL_UART_IRQHandler+0x66>
 8001e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fbfc 	bl	8002664 <UART_Receive_IT>
      return;
 8001e6c:	e25b      	b.n	8002326 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80de 	beq.w	8002034 <HAL_UART_IRQHandler+0x22c>
 8001e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d106      	bne.n	8001e92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80d1 	beq.w	8002034 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_UART_IRQHandler+0xae>
 8001e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_UART_IRQHandler+0xd2>
 8001ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f043 0202 	orr.w	r2, r3, #2
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_UART_IRQHandler+0xf6>
 8001ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f043 0204 	orr.w	r2, r3, #4
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d011      	beq.n	8001f2e <HAL_UART_IRQHandler+0x126>
 8001f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d105      	bne.n	8001f22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f043 0208 	orr.w	r2, r3, #8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 81f2 	beq.w	800231c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_UART_IRQHandler+0x14e>
 8001f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fb87 	bl	8002664 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	2b40      	cmp	r3, #64	; 0x40
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <HAL_UART_IRQHandler+0x17a>
 8001f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d04f      	beq.n	8002022 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fa8f 	bl	80024a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	2b40      	cmp	r3, #64	; 0x40
 8001f94:	d141      	bne.n	800201a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3314      	adds	r3, #20
 8001f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fa4:	e853 3f00 	ldrex	r3, [r3]
 8001fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3314      	adds	r3, #20
 8001fbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001fc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001fce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001fd2:	e841 2300 	strex	r3, r2, [r1]
 8001fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1d9      	bne.n	8001f96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d013      	beq.n	8002012 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	4a7e      	ldr	r2, [pc, #504]	; (80021e8 <HAL_UART_IRQHandler+0x3e0>)
 8001ff0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe ff89 	bl	8000f0e <HAL_DMA_Abort_IT>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800200c:	4610      	mov	r0, r2
 800200e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002010:	e00e      	b.n	8002030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f99e 	bl	8002354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002018:	e00a      	b.n	8002030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f99a 	bl	8002354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002020:	e006      	b.n	8002030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f996 	bl	8002354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800202e:	e175      	b.n	800231c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002030:	bf00      	nop
    return;
 8002032:	e173      	b.n	800231c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	2b01      	cmp	r3, #1
 800203a:	f040 814f 	bne.w	80022dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800203e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8148 	beq.w	80022dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800204c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8141 	beq.w	80022dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b40      	cmp	r3, #64	; 0x40
 800207c:	f040 80b6 	bne.w	80021ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800208c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8145 	beq.w	8002320 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800209a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800209e:	429a      	cmp	r2, r3
 80020a0:	f080 813e 	bcs.w	8002320 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80020aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b6:	f000 8088 	beq.w	80021ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	330c      	adds	r3, #12
 80020c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020c8:	e853 3f00 	ldrex	r3, [r3]
 80020cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80020d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	330c      	adds	r3, #12
 80020e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80020f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020f6:	e841 2300 	strex	r3, r2, [r1]
 80020fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80020fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1d9      	bne.n	80020ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3314      	adds	r3, #20
 800210c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002110:	e853 3f00 	ldrex	r3, [r3]
 8002114:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3314      	adds	r3, #20
 8002126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800212a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800212e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002130:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002132:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002136:	e841 2300 	strex	r3, r2, [r1]
 800213a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800213c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1e1      	bne.n	8002106 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3314      	adds	r3, #20
 8002148:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800214c:	e853 3f00 	ldrex	r3, [r3]
 8002150:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3314      	adds	r3, #20
 8002162:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002166:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002168:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800216c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800216e:	e841 2300 	strex	r3, r2, [r1]
 8002172:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1e3      	bne.n	8002142 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	330c      	adds	r3, #12
 800218e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002192:	e853 3f00 	ldrex	r3, [r3]
 8002196:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800219a:	f023 0310 	bic.w	r3, r3, #16
 800219e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	330c      	adds	r3, #12
 80021a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80021ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80021ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80021b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021b4:	e841 2300 	strex	r3, r2, [r1]
 80021b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80021ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e3      	bne.n	8002188 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fe32 	bl	8000e2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021d8:	b29b      	uxth	r3, r3
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f8c1 	bl	8002368 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021e6:	e09b      	b.n	8002320 <HAL_UART_IRQHandler+0x518>
 80021e8:	0800256d 	.word	0x0800256d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 808e 	beq.w	8002324 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8089 	beq.w	8002324 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	330c      	adds	r3, #12
 8002218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221c:	e853 3f00 	ldrex	r3, [r3]
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	330c      	adds	r3, #12
 8002232:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002236:	647a      	str	r2, [r7, #68]	; 0x44
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800223c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800223e:	e841 2300 	strex	r3, r2, [r1]
 8002242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e3      	bne.n	8002212 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3314      	adds	r3, #20
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	e853 3f00 	ldrex	r3, [r3]
 8002258:	623b      	str	r3, [r7, #32]
   return(result);
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3314      	adds	r3, #20
 800226a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800226e:	633a      	str	r2, [r7, #48]	; 0x30
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002276:	e841 2300 	strex	r3, r2, [r1]
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e3      	bne.n	800224a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	330c      	adds	r3, #12
 8002296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	e853 3f00 	ldrex	r3, [r3]
 800229e:	60fb      	str	r3, [r7, #12]
   return(result);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0310 	bic.w	r3, r3, #16
 80022a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	330c      	adds	r3, #12
 80022b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80022b4:	61fa      	str	r2, [r7, #28]
 80022b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b8:	69b9      	ldr	r1, [r7, #24]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	e841 2300 	strex	r3, r2, [r1]
 80022c0:	617b      	str	r3, [r7, #20]
   return(result);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e3      	bne.n	8002290 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022d2:	4619      	mov	r1, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f847 	bl	8002368 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022da:	e023      	b.n	8002324 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_UART_IRQHandler+0x4f4>
 80022e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f94d 	bl	8002594 <UART_Transmit_IT>
    return;
 80022fa:	e014      	b.n	8002326 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00e      	beq.n	8002326 <HAL_UART_IRQHandler+0x51e>
 8002308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f98d 	bl	8002634 <UART_EndTransmit_IT>
    return;
 800231a:	e004      	b.n	8002326 <HAL_UART_IRQHandler+0x51e>
    return;
 800231c:	bf00      	nop
 800231e:	e002      	b.n	8002326 <HAL_UART_IRQHandler+0x51e>
      return;
 8002320:	bf00      	nop
 8002322:	e000      	b.n	8002326 <HAL_UART_IRQHandler+0x51e>
      return;
 8002324:	bf00      	nop
  }
}
 8002326:	37e8      	adds	r7, #232	; 0xe8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002390:	e03b      	b.n	800240a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d037      	beq.n	800240a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7fe fc07 	bl	8000bac <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	6a3a      	ldr	r2, [r7, #32]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e03a      	b.n	800242a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d023      	beq.n	800240a <UART_WaitOnFlagUntilTimeout+0x8a>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b80      	cmp	r3, #128	; 0x80
 80023c6:	d020      	beq.n	800240a <UART_WaitOnFlagUntilTimeout+0x8a>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d01d      	beq.n	800240a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d116      	bne.n	800240a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f857 	bl	80024a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2208      	movs	r2, #8
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e00f      	b.n	800242a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4013      	ands	r3, r2
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	429a      	cmp	r2, r3
 8002418:	bf0c      	ite	eq
 800241a:	2301      	moveq	r3, #1
 800241c:	2300      	movne	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	429a      	cmp	r2, r3
 8002426:	d0b4      	beq.n	8002392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	4613      	mov	r3, r2
 800243e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	88fa      	ldrh	r2, [r7, #6]
 8002450:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2222      	movs	r2, #34	; 0x22
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002476:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0220 	orr.w	r2, r2, #32
 8002496:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b095      	sub	sp, #84	; 0x54
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b8:	e853 3f00 	ldrex	r3, [r3]
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330c      	adds	r3, #12
 80024cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024ce:	643a      	str	r2, [r7, #64]	; 0x40
 80024d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024d6:	e841 2300 	strex	r3, r2, [r1]
 80024da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80024dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1e5      	bne.n	80024ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3314      	adds	r3, #20
 80024e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	e853 3f00 	ldrex	r3, [r3]
 80024f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3314      	adds	r3, #20
 8002500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002502:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e5      	bne.n	80024e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	2b01      	cmp	r3, #1
 800251c:	d119      	bne.n	8002552 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	e853 3f00 	ldrex	r3, [r3]
 800252c:	60bb      	str	r3, [r7, #8]
   return(result);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f023 0310 	bic.w	r3, r3, #16
 8002534:	647b      	str	r3, [r7, #68]	; 0x44
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	330c      	adds	r3, #12
 800253c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800253e:	61ba      	str	r2, [r7, #24]
 8002540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002542:	6979      	ldr	r1, [r7, #20]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	613b      	str	r3, [r7, #16]
   return(result);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e5      	bne.n	800251e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002560:	bf00      	nop
 8002562:	3754      	adds	r7, #84	; 0x54
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f7ff fee4 	bl	8002354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b21      	cmp	r3, #33	; 0x21
 80025a6:	d13e      	bne.n	8002626 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b0:	d114      	bne.n	80025dc <UART_Transmit_IT+0x48>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d110      	bne.n	80025dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	1c9a      	adds	r2, r3, #2
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	621a      	str	r2, [r3, #32]
 80025da:	e008      	b.n	80025ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	1c59      	adds	r1, r3, #1
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6211      	str	r1, [r2, #32]
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4619      	mov	r1, r3
 80025fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002610:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002620:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800264a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff fe69 	bl	800232c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	; 0x30
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b22      	cmp	r3, #34	; 0x22
 8002676:	f040 80ae 	bne.w	80027d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	d117      	bne.n	80026b4 <UART_Receive_IT+0x50>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d113      	bne.n	80026b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	b29b      	uxth	r3, r3
 800269e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	1c9a      	adds	r2, r3, #2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
 80026b2:	e026      	b.n	8002702 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c6:	d007      	beq.n	80026d8 <UART_Receive_IT+0x74>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <UART_Receive_IT+0x82>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d106      	bne.n	80026e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e008      	b.n	80026f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29b      	uxth	r3, r3
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4619      	mov	r1, r3
 8002710:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002712:	2b00      	cmp	r3, #0
 8002714:	d15d      	bne.n	80027d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0220 	bic.w	r2, r2, #32
 8002724:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002734:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	2b01      	cmp	r3, #1
 800275a:	d135      	bne.n	80027c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	330c      	adds	r3, #12
 8002768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	e853 3f00 	ldrex	r3, [r3]
 8002770:	613b      	str	r3, [r7, #16]
   return(result);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f023 0310 	bic.w	r3, r3, #16
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	330c      	adds	r3, #12
 8002780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002782:	623a      	str	r2, [r7, #32]
 8002784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002786:	69f9      	ldr	r1, [r7, #28]
 8002788:	6a3a      	ldr	r2, [r7, #32]
 800278a:	e841 2300 	strex	r3, r2, [r1]
 800278e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e5      	bne.n	8002762 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d10a      	bne.n	80027ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff fdd1 	bl	8002368 <HAL_UARTEx_RxEventCallback>
 80027c6:	e002      	b.n	80027ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fdb9 	bl	8002340 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e002      	b.n	80027d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
  }
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3730      	adds	r7, #48	; 0x30
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e4:	b0c0      	sub	sp, #256	; 0x100
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	68d9      	ldr	r1, [r3, #12]
 80027fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	ea40 0301 	orr.w	r3, r0, r1
 8002808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	431a      	orrs	r2, r3
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	431a      	orrs	r2, r3
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002838:	f021 010c 	bic.w	r1, r1, #12
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002846:	430b      	orrs	r3, r1
 8002848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800284a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285a:	6999      	ldr	r1, [r3, #24]
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	ea40 0301 	orr.w	r3, r0, r1
 8002866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b8f      	ldr	r3, [pc, #572]	; (8002aac <UART_SetConfig+0x2cc>)
 8002870:	429a      	cmp	r2, r3
 8002872:	d005      	beq.n	8002880 <UART_SetConfig+0xa0>
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b8d      	ldr	r3, [pc, #564]	; (8002ab0 <UART_SetConfig+0x2d0>)
 800287c:	429a      	cmp	r2, r3
 800287e:	d104      	bne.n	800288a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002880:	f7ff f9ae 	bl	8001be0 <HAL_RCC_GetPCLK2Freq>
 8002884:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002888:	e003      	b.n	8002892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800288a:	f7ff f995 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 800288e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800289c:	f040 810c 	bne.w	8002ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028a4:	2200      	movs	r2, #0
 80028a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028b2:	4622      	mov	r2, r4
 80028b4:	462b      	mov	r3, r5
 80028b6:	1891      	adds	r1, r2, r2
 80028b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80028ba:	415b      	adcs	r3, r3
 80028bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028c2:	4621      	mov	r1, r4
 80028c4:	eb12 0801 	adds.w	r8, r2, r1
 80028c8:	4629      	mov	r1, r5
 80028ca:	eb43 0901 	adc.w	r9, r3, r1
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028e2:	4690      	mov	r8, r2
 80028e4:	4699      	mov	r9, r3
 80028e6:	4623      	mov	r3, r4
 80028e8:	eb18 0303 	adds.w	r3, r8, r3
 80028ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028f0:	462b      	mov	r3, r5
 80028f2:	eb49 0303 	adc.w	r3, r9, r3
 80028f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002906:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800290a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800290e:	460b      	mov	r3, r1
 8002910:	18db      	adds	r3, r3, r3
 8002912:	653b      	str	r3, [r7, #80]	; 0x50
 8002914:	4613      	mov	r3, r2
 8002916:	eb42 0303 	adc.w	r3, r2, r3
 800291a:	657b      	str	r3, [r7, #84]	; 0x54
 800291c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002924:	f7fd fc5e 	bl	80001e4 <__aeabi_uldivmod>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4b61      	ldr	r3, [pc, #388]	; (8002ab4 <UART_SetConfig+0x2d4>)
 800292e:	fba3 2302 	umull	r2, r3, r3, r2
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	011c      	lsls	r4, r3, #4
 8002936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002940:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002948:	4642      	mov	r2, r8
 800294a:	464b      	mov	r3, r9
 800294c:	1891      	adds	r1, r2, r2
 800294e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002950:	415b      	adcs	r3, r3
 8002952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002958:	4641      	mov	r1, r8
 800295a:	eb12 0a01 	adds.w	sl, r2, r1
 800295e:	4649      	mov	r1, r9
 8002960:	eb43 0b01 	adc.w	fp, r3, r1
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002978:	4692      	mov	sl, r2
 800297a:	469b      	mov	fp, r3
 800297c:	4643      	mov	r3, r8
 800297e:	eb1a 0303 	adds.w	r3, sl, r3
 8002982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002986:	464b      	mov	r3, r9
 8002988:	eb4b 0303 	adc.w	r3, fp, r3
 800298c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800299c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029a4:	460b      	mov	r3, r1
 80029a6:	18db      	adds	r3, r3, r3
 80029a8:	643b      	str	r3, [r7, #64]	; 0x40
 80029aa:	4613      	mov	r3, r2
 80029ac:	eb42 0303 	adc.w	r3, r2, r3
 80029b0:	647b      	str	r3, [r7, #68]	; 0x44
 80029b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029ba:	f7fd fc13 	bl	80001e4 <__aeabi_uldivmod>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <UART_SetConfig+0x2d4>)
 80029c6:	fba3 2301 	umull	r2, r3, r3, r1
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2264      	movs	r2, #100	; 0x64
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	1acb      	subs	r3, r1, r3
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <UART_SetConfig+0x2d4>)
 80029dc:	fba3 2302 	umull	r2, r3, r3, r2
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029e8:	441c      	add	r4, r3
 80029ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ee:	2200      	movs	r2, #0
 80029f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029fc:	4642      	mov	r2, r8
 80029fe:	464b      	mov	r3, r9
 8002a00:	1891      	adds	r1, r2, r2
 8002a02:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a04:	415b      	adcs	r3, r3
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	1851      	adds	r1, r2, r1
 8002a10:	6339      	str	r1, [r7, #48]	; 0x30
 8002a12:	4649      	mov	r1, r9
 8002a14:	414b      	adcs	r3, r1
 8002a16:	637b      	str	r3, [r7, #52]	; 0x34
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a24:	4659      	mov	r1, fp
 8002a26:	00cb      	lsls	r3, r1, #3
 8002a28:	4651      	mov	r1, sl
 8002a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a2e:	4651      	mov	r1, sl
 8002a30:	00ca      	lsls	r2, r1, #3
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	4642      	mov	r2, r8
 8002a3a:	189b      	adds	r3, r3, r2
 8002a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a40:	464b      	mov	r3, r9
 8002a42:	460a      	mov	r2, r1
 8002a44:	eb42 0303 	adc.w	r3, r2, r3
 8002a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a60:	460b      	mov	r3, r1
 8002a62:	18db      	adds	r3, r3, r3
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a66:	4613      	mov	r3, r2
 8002a68:	eb42 0303 	adc.w	r3, r2, r3
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a76:	f7fd fbb5 	bl	80001e4 <__aeabi_uldivmod>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <UART_SetConfig+0x2d4>)
 8002a80:	fba3 1302 	umull	r1, r3, r3, r2
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	2164      	movs	r1, #100	; 0x64
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	3332      	adds	r3, #50	; 0x32
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <UART_SetConfig+0x2d4>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	f003 0207 	and.w	r2, r3, #7
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4422      	add	r2, r4
 8002aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002aa8:	e106      	b.n	8002cb8 <UART_SetConfig+0x4d8>
 8002aaa:	bf00      	nop
 8002aac:	40011000 	.word	0x40011000
 8002ab0:	40011400 	.word	0x40011400
 8002ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002abc:	2200      	movs	r2, #0
 8002abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002aca:	4642      	mov	r2, r8
 8002acc:	464b      	mov	r3, r9
 8002ace:	1891      	adds	r1, r2, r2
 8002ad0:	6239      	str	r1, [r7, #32]
 8002ad2:	415b      	adcs	r3, r3
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ada:	4641      	mov	r1, r8
 8002adc:	1854      	adds	r4, r2, r1
 8002ade:	4649      	mov	r1, r9
 8002ae0:	eb43 0501 	adc.w	r5, r3, r1
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	00eb      	lsls	r3, r5, #3
 8002aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002af2:	00e2      	lsls	r2, r4, #3
 8002af4:	4614      	mov	r4, r2
 8002af6:	461d      	mov	r5, r3
 8002af8:	4643      	mov	r3, r8
 8002afa:	18e3      	adds	r3, r4, r3
 8002afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b00:	464b      	mov	r3, r9
 8002b02:	eb45 0303 	adc.w	r3, r5, r3
 8002b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b26:	4629      	mov	r1, r5
 8002b28:	008b      	lsls	r3, r1, #2
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b30:	4621      	mov	r1, r4
 8002b32:	008a      	lsls	r2, r1, #2
 8002b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b38:	f7fd fb54 	bl	80001e4 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4b60      	ldr	r3, [pc, #384]	; (8002cc4 <UART_SetConfig+0x4e4>)
 8002b42:	fba3 2302 	umull	r2, r3, r3, r2
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	011c      	lsls	r4, r3, #4
 8002b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	1891      	adds	r1, r2, r2
 8002b62:	61b9      	str	r1, [r7, #24]
 8002b64:	415b      	adcs	r3, r3
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	1851      	adds	r1, r2, r1
 8002b70:	6139      	str	r1, [r7, #16]
 8002b72:	4649      	mov	r1, r9
 8002b74:	414b      	adcs	r3, r1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b84:	4659      	mov	r1, fp
 8002b86:	00cb      	lsls	r3, r1, #3
 8002b88:	4651      	mov	r1, sl
 8002b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b8e:	4651      	mov	r1, sl
 8002b90:	00ca      	lsls	r2, r1, #3
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	4642      	mov	r2, r8
 8002b9a:	189b      	adds	r3, r3, r2
 8002b9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ba0:	464b      	mov	r3, r9
 8002ba2:	460a      	mov	r2, r1
 8002ba4:	eb42 0303 	adc.w	r3, r2, r3
 8002ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	008b      	lsls	r3, r1, #2
 8002bc8:	4641      	mov	r1, r8
 8002bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bce:	4641      	mov	r1, r8
 8002bd0:	008a      	lsls	r2, r1, #2
 8002bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002bd6:	f7fd fb05 	bl	80001e4 <__aeabi_uldivmod>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <UART_SetConfig+0x4e4>)
 8002be2:	fba3 2301 	umull	r2, r3, r3, r1
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2264      	movs	r2, #100	; 0x64
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	1acb      	subs	r3, r1, r3
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	3332      	adds	r3, #50	; 0x32
 8002bf4:	4a33      	ldr	r2, [pc, #204]	; (8002cc4 <UART_SetConfig+0x4e4>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c00:	441c      	add	r4, r3
 8002c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c06:	2200      	movs	r2, #0
 8002c08:	673b      	str	r3, [r7, #112]	; 0x70
 8002c0a:	677a      	str	r2, [r7, #116]	; 0x74
 8002c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c10:	4642      	mov	r2, r8
 8002c12:	464b      	mov	r3, r9
 8002c14:	1891      	adds	r1, r2, r2
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	415b      	adcs	r3, r3
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c20:	4641      	mov	r1, r8
 8002c22:	1851      	adds	r1, r2, r1
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	4649      	mov	r1, r9
 8002c28:	414b      	adcs	r3, r1
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c38:	4659      	mov	r1, fp
 8002c3a:	00cb      	lsls	r3, r1, #3
 8002c3c:	4651      	mov	r1, sl
 8002c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c42:	4651      	mov	r1, sl
 8002c44:	00ca      	lsls	r2, r1, #3
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c52:	464b      	mov	r3, r9
 8002c54:	460a      	mov	r2, r1
 8002c56:	eb42 0303 	adc.w	r3, r2, r3
 8002c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	663b      	str	r3, [r7, #96]	; 0x60
 8002c66:	667a      	str	r2, [r7, #100]	; 0x64
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c74:	4649      	mov	r1, r9
 8002c76:	008b      	lsls	r3, r1, #2
 8002c78:	4641      	mov	r1, r8
 8002c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c7e:	4641      	mov	r1, r8
 8002c80:	008a      	lsls	r2, r1, #2
 8002c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c86:	f7fd faad 	bl	80001e4 <__aeabi_uldivmod>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <UART_SetConfig+0x4e4>)
 8002c90:	fba3 1302 	umull	r1, r3, r3, r2
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	2164      	movs	r1, #100	; 0x64
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	3332      	adds	r3, #50	; 0x32
 8002ca2:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <UART_SetConfig+0x4e4>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4422      	add	r2, r4
 8002cb6:	609a      	str	r2, [r3, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cc4:	51eb851f 	.word	0x51eb851f

08002cc8 <__sflush_r>:
 8002cc8:	898a      	ldrh	r2, [r1, #12]
 8002cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cce:	4605      	mov	r5, r0
 8002cd0:	0710      	lsls	r0, r2, #28
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	d458      	bmi.n	8002d88 <__sflush_r+0xc0>
 8002cd6:	684b      	ldr	r3, [r1, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	dc05      	bgt.n	8002ce8 <__sflush_r+0x20>
 8002cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	dc02      	bgt.n	8002ce8 <__sflush_r+0x20>
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cea:	2e00      	cmp	r6, #0
 8002cec:	d0f9      	beq.n	8002ce2 <__sflush_r+0x1a>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cf4:	682f      	ldr	r7, [r5, #0]
 8002cf6:	6a21      	ldr	r1, [r4, #32]
 8002cf8:	602b      	str	r3, [r5, #0]
 8002cfa:	d032      	beq.n	8002d62 <__sflush_r+0x9a>
 8002cfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cfe:	89a3      	ldrh	r3, [r4, #12]
 8002d00:	075a      	lsls	r2, r3, #29
 8002d02:	d505      	bpl.n	8002d10 <__sflush_r+0x48>
 8002d04:	6863      	ldr	r3, [r4, #4]
 8002d06:	1ac0      	subs	r0, r0, r3
 8002d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d0a:	b10b      	cbz	r3, 8002d10 <__sflush_r+0x48>
 8002d0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d0e:	1ac0      	subs	r0, r0, r3
 8002d10:	2300      	movs	r3, #0
 8002d12:	4602      	mov	r2, r0
 8002d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d16:	6a21      	ldr	r1, [r4, #32]
 8002d18:	4628      	mov	r0, r5
 8002d1a:	47b0      	blx	r6
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	d106      	bne.n	8002d30 <__sflush_r+0x68>
 8002d22:	6829      	ldr	r1, [r5, #0]
 8002d24:	291d      	cmp	r1, #29
 8002d26:	d82b      	bhi.n	8002d80 <__sflush_r+0xb8>
 8002d28:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <__sflush_r+0x108>)
 8002d2a:	410a      	asrs	r2, r1
 8002d2c:	07d6      	lsls	r6, r2, #31
 8002d2e:	d427      	bmi.n	8002d80 <__sflush_r+0xb8>
 8002d30:	2200      	movs	r2, #0
 8002d32:	6062      	str	r2, [r4, #4]
 8002d34:	04d9      	lsls	r1, r3, #19
 8002d36:	6922      	ldr	r2, [r4, #16]
 8002d38:	6022      	str	r2, [r4, #0]
 8002d3a:	d504      	bpl.n	8002d46 <__sflush_r+0x7e>
 8002d3c:	1c42      	adds	r2, r0, #1
 8002d3e:	d101      	bne.n	8002d44 <__sflush_r+0x7c>
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	b903      	cbnz	r3, 8002d46 <__sflush_r+0x7e>
 8002d44:	6560      	str	r0, [r4, #84]	; 0x54
 8002d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d48:	602f      	str	r7, [r5, #0]
 8002d4a:	2900      	cmp	r1, #0
 8002d4c:	d0c9      	beq.n	8002ce2 <__sflush_r+0x1a>
 8002d4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d52:	4299      	cmp	r1, r3
 8002d54:	d002      	beq.n	8002d5c <__sflush_r+0x94>
 8002d56:	4628      	mov	r0, r5
 8002d58:	f000 f9f4 	bl	8003144 <_free_r>
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	6360      	str	r0, [r4, #52]	; 0x34
 8002d60:	e7c0      	b.n	8002ce4 <__sflush_r+0x1c>
 8002d62:	2301      	movs	r3, #1
 8002d64:	4628      	mov	r0, r5
 8002d66:	47b0      	blx	r6
 8002d68:	1c41      	adds	r1, r0, #1
 8002d6a:	d1c8      	bne.n	8002cfe <__sflush_r+0x36>
 8002d6c:	682b      	ldr	r3, [r5, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0c5      	beq.n	8002cfe <__sflush_r+0x36>
 8002d72:	2b1d      	cmp	r3, #29
 8002d74:	d001      	beq.n	8002d7a <__sflush_r+0xb2>
 8002d76:	2b16      	cmp	r3, #22
 8002d78:	d101      	bne.n	8002d7e <__sflush_r+0xb6>
 8002d7a:	602f      	str	r7, [r5, #0]
 8002d7c:	e7b1      	b.n	8002ce2 <__sflush_r+0x1a>
 8002d7e:	89a3      	ldrh	r3, [r4, #12]
 8002d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	e7ad      	b.n	8002ce4 <__sflush_r+0x1c>
 8002d88:	690f      	ldr	r7, [r1, #16]
 8002d8a:	2f00      	cmp	r7, #0
 8002d8c:	d0a9      	beq.n	8002ce2 <__sflush_r+0x1a>
 8002d8e:	0793      	lsls	r3, r2, #30
 8002d90:	680e      	ldr	r6, [r1, #0]
 8002d92:	bf08      	it	eq
 8002d94:	694b      	ldreq	r3, [r1, #20]
 8002d96:	600f      	str	r7, [r1, #0]
 8002d98:	bf18      	it	ne
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	eba6 0807 	sub.w	r8, r6, r7
 8002da0:	608b      	str	r3, [r1, #8]
 8002da2:	f1b8 0f00 	cmp.w	r8, #0
 8002da6:	dd9c      	ble.n	8002ce2 <__sflush_r+0x1a>
 8002da8:	6a21      	ldr	r1, [r4, #32]
 8002daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002dac:	4643      	mov	r3, r8
 8002dae:	463a      	mov	r2, r7
 8002db0:	4628      	mov	r0, r5
 8002db2:	47b0      	blx	r6
 8002db4:	2800      	cmp	r0, #0
 8002db6:	dc06      	bgt.n	8002dc6 <__sflush_r+0xfe>
 8002db8:	89a3      	ldrh	r3, [r4, #12]
 8002dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbe:	81a3      	strh	r3, [r4, #12]
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	e78e      	b.n	8002ce4 <__sflush_r+0x1c>
 8002dc6:	4407      	add	r7, r0
 8002dc8:	eba8 0800 	sub.w	r8, r8, r0
 8002dcc:	e7e9      	b.n	8002da2 <__sflush_r+0xda>
 8002dce:	bf00      	nop
 8002dd0:	dfbffffe 	.word	0xdfbffffe

08002dd4 <_fflush_r>:
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	690b      	ldr	r3, [r1, #16]
 8002dd8:	4605      	mov	r5, r0
 8002dda:	460c      	mov	r4, r1
 8002ddc:	b913      	cbnz	r3, 8002de4 <_fflush_r+0x10>
 8002dde:	2500      	movs	r5, #0
 8002de0:	4628      	mov	r0, r5
 8002de2:	bd38      	pop	{r3, r4, r5, pc}
 8002de4:	b118      	cbz	r0, 8002dee <_fflush_r+0x1a>
 8002de6:	6a03      	ldr	r3, [r0, #32]
 8002de8:	b90b      	cbnz	r3, 8002dee <_fflush_r+0x1a>
 8002dea:	f000 f8bb 	bl	8002f64 <__sinit>
 8002dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f3      	beq.n	8002dde <_fflush_r+0xa>
 8002df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002df8:	07d0      	lsls	r0, r2, #31
 8002dfa:	d404      	bmi.n	8002e06 <_fflush_r+0x32>
 8002dfc:	0599      	lsls	r1, r3, #22
 8002dfe:	d402      	bmi.n	8002e06 <_fflush_r+0x32>
 8002e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e02:	f000 f99c 	bl	800313e <__retarget_lock_acquire_recursive>
 8002e06:	4628      	mov	r0, r5
 8002e08:	4621      	mov	r1, r4
 8002e0a:	f7ff ff5d 	bl	8002cc8 <__sflush_r>
 8002e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e10:	07da      	lsls	r2, r3, #31
 8002e12:	4605      	mov	r5, r0
 8002e14:	d4e4      	bmi.n	8002de0 <_fflush_r+0xc>
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	059b      	lsls	r3, r3, #22
 8002e1a:	d4e1      	bmi.n	8002de0 <_fflush_r+0xc>
 8002e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e1e:	f000 f98f 	bl	8003140 <__retarget_lock_release_recursive>
 8002e22:	e7dd      	b.n	8002de0 <_fflush_r+0xc>

08002e24 <fflush>:
 8002e24:	4601      	mov	r1, r0
 8002e26:	b920      	cbnz	r0, 8002e32 <fflush+0xe>
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <fflush+0x18>)
 8002e2a:	4905      	ldr	r1, [pc, #20]	; (8002e40 <fflush+0x1c>)
 8002e2c:	4805      	ldr	r0, [pc, #20]	; (8002e44 <fflush+0x20>)
 8002e2e:	f000 b8b1 	b.w	8002f94 <_fwalk_sglue>
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <fflush+0x24>)
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	f7ff bfcd 	b.w	8002dd4 <_fflush_r>
 8002e3a:	bf00      	nop
 8002e3c:	2000000c 	.word	0x2000000c
 8002e40:	08002dd5 	.word	0x08002dd5
 8002e44:	20000018 	.word	0x20000018
 8002e48:	20000064 	.word	0x20000064

08002e4c <std>:
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	b510      	push	{r4, lr}
 8002e50:	4604      	mov	r4, r0
 8002e52:	e9c0 3300 	strd	r3, r3, [r0]
 8002e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e5a:	6083      	str	r3, [r0, #8]
 8002e5c:	8181      	strh	r1, [r0, #12]
 8002e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8002e60:	81c2      	strh	r2, [r0, #14]
 8002e62:	6183      	str	r3, [r0, #24]
 8002e64:	4619      	mov	r1, r3
 8002e66:	2208      	movs	r2, #8
 8002e68:	305c      	adds	r0, #92	; 0x5c
 8002e6a:	f000 f8f4 	bl	8003056 <memset>
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <std+0x58>)
 8002e70:	6263      	str	r3, [r4, #36]	; 0x24
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <std+0x5c>)
 8002e74:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <std+0x60>)
 8002e78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <std+0x64>)
 8002e7c:	6323      	str	r3, [r4, #48]	; 0x30
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <std+0x68>)
 8002e80:	6224      	str	r4, [r4, #32]
 8002e82:	429c      	cmp	r4, r3
 8002e84:	d006      	beq.n	8002e94 <std+0x48>
 8002e86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002e8a:	4294      	cmp	r4, r2
 8002e8c:	d002      	beq.n	8002e94 <std+0x48>
 8002e8e:	33d0      	adds	r3, #208	; 0xd0
 8002e90:	429c      	cmp	r4, r3
 8002e92:	d105      	bne.n	8002ea0 <std+0x54>
 8002e94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e9c:	f000 b94e 	b.w	800313c <__retarget_lock_init_recursive>
 8002ea0:	bd10      	pop	{r4, pc}
 8002ea2:	bf00      	nop
 8002ea4:	08002fd1 	.word	0x08002fd1
 8002ea8:	08002ff3 	.word	0x08002ff3
 8002eac:	0800302b 	.word	0x0800302b
 8002eb0:	0800304f 	.word	0x0800304f
 8002eb4:	200001cc 	.word	0x200001cc

08002eb8 <stdio_exit_handler>:
 8002eb8:	4a02      	ldr	r2, [pc, #8]	; (8002ec4 <stdio_exit_handler+0xc>)
 8002eba:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <stdio_exit_handler+0x10>)
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <stdio_exit_handler+0x14>)
 8002ebe:	f000 b869 	b.w	8002f94 <_fwalk_sglue>
 8002ec2:	bf00      	nop
 8002ec4:	2000000c 	.word	0x2000000c
 8002ec8:	08002dd5 	.word	0x08002dd5
 8002ecc:	20000018 	.word	0x20000018

08002ed0 <cleanup_stdio>:
 8002ed0:	6841      	ldr	r1, [r0, #4]
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <cleanup_stdio+0x34>)
 8002ed4:	4299      	cmp	r1, r3
 8002ed6:	b510      	push	{r4, lr}
 8002ed8:	4604      	mov	r4, r0
 8002eda:	d001      	beq.n	8002ee0 <cleanup_stdio+0x10>
 8002edc:	f7ff ff7a 	bl	8002dd4 <_fflush_r>
 8002ee0:	68a1      	ldr	r1, [r4, #8]
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <cleanup_stdio+0x38>)
 8002ee4:	4299      	cmp	r1, r3
 8002ee6:	d002      	beq.n	8002eee <cleanup_stdio+0x1e>
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f7ff ff73 	bl	8002dd4 <_fflush_r>
 8002eee:	68e1      	ldr	r1, [r4, #12]
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <cleanup_stdio+0x3c>)
 8002ef2:	4299      	cmp	r1, r3
 8002ef4:	d004      	beq.n	8002f00 <cleanup_stdio+0x30>
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002efc:	f7ff bf6a 	b.w	8002dd4 <_fflush_r>
 8002f00:	bd10      	pop	{r4, pc}
 8002f02:	bf00      	nop
 8002f04:	200001cc 	.word	0x200001cc
 8002f08:	20000234 	.word	0x20000234
 8002f0c:	2000029c 	.word	0x2000029c

08002f10 <global_stdio_init.part.0>:
 8002f10:	b510      	push	{r4, lr}
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <global_stdio_init.part.0+0x30>)
 8002f14:	4c0b      	ldr	r4, [pc, #44]	; (8002f44 <global_stdio_init.part.0+0x34>)
 8002f16:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <global_stdio_init.part.0+0x38>)
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2104      	movs	r1, #4
 8002f20:	f7ff ff94 	bl	8002e4c <std>
 8002f24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2109      	movs	r1, #9
 8002f2c:	f7ff ff8e 	bl	8002e4c <std>
 8002f30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002f34:	2202      	movs	r2, #2
 8002f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f3a:	2112      	movs	r1, #18
 8002f3c:	f7ff bf86 	b.w	8002e4c <std>
 8002f40:	20000304 	.word	0x20000304
 8002f44:	200001cc 	.word	0x200001cc
 8002f48:	08002eb9 	.word	0x08002eb9

08002f4c <__sfp_lock_acquire>:
 8002f4c:	4801      	ldr	r0, [pc, #4]	; (8002f54 <__sfp_lock_acquire+0x8>)
 8002f4e:	f000 b8f6 	b.w	800313e <__retarget_lock_acquire_recursive>
 8002f52:	bf00      	nop
 8002f54:	2000030d 	.word	0x2000030d

08002f58 <__sfp_lock_release>:
 8002f58:	4801      	ldr	r0, [pc, #4]	; (8002f60 <__sfp_lock_release+0x8>)
 8002f5a:	f000 b8f1 	b.w	8003140 <__retarget_lock_release_recursive>
 8002f5e:	bf00      	nop
 8002f60:	2000030d 	.word	0x2000030d

08002f64 <__sinit>:
 8002f64:	b510      	push	{r4, lr}
 8002f66:	4604      	mov	r4, r0
 8002f68:	f7ff fff0 	bl	8002f4c <__sfp_lock_acquire>
 8002f6c:	6a23      	ldr	r3, [r4, #32]
 8002f6e:	b11b      	cbz	r3, 8002f78 <__sinit+0x14>
 8002f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f74:	f7ff bff0 	b.w	8002f58 <__sfp_lock_release>
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <__sinit+0x28>)
 8002f7a:	6223      	str	r3, [r4, #32]
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <__sinit+0x2c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f5      	bne.n	8002f70 <__sinit+0xc>
 8002f84:	f7ff ffc4 	bl	8002f10 <global_stdio_init.part.0>
 8002f88:	e7f2      	b.n	8002f70 <__sinit+0xc>
 8002f8a:	bf00      	nop
 8002f8c:	08002ed1 	.word	0x08002ed1
 8002f90:	20000304 	.word	0x20000304

08002f94 <_fwalk_sglue>:
 8002f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f98:	4607      	mov	r7, r0
 8002f9a:	4688      	mov	r8, r1
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fa4:	f1b9 0901 	subs.w	r9, r9, #1
 8002fa8:	d505      	bpl.n	8002fb6 <_fwalk_sglue+0x22>
 8002faa:	6824      	ldr	r4, [r4, #0]
 8002fac:	2c00      	cmp	r4, #0
 8002fae:	d1f7      	bne.n	8002fa0 <_fwalk_sglue+0xc>
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fb6:	89ab      	ldrh	r3, [r5, #12]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d907      	bls.n	8002fcc <_fwalk_sglue+0x38>
 8002fbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	d003      	beq.n	8002fcc <_fwalk_sglue+0x38>
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	4638      	mov	r0, r7
 8002fc8:	47c0      	blx	r8
 8002fca:	4306      	orrs	r6, r0
 8002fcc:	3568      	adds	r5, #104	; 0x68
 8002fce:	e7e9      	b.n	8002fa4 <_fwalk_sglue+0x10>

08002fd0 <__sread>:
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd8:	f000 f868 	bl	80030ac <_read_r>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	bfab      	itete	ge
 8002fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8002fe4:	181b      	addge	r3, r3, r0
 8002fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002fea:	bfac      	ite	ge
 8002fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fee:	81a3      	strhlt	r3, [r4, #12]
 8002ff0:	bd10      	pop	{r4, pc}

08002ff2 <__swrite>:
 8002ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff6:	461f      	mov	r7, r3
 8002ff8:	898b      	ldrh	r3, [r1, #12]
 8002ffa:	05db      	lsls	r3, r3, #23
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	460c      	mov	r4, r1
 8003000:	4616      	mov	r6, r2
 8003002:	d505      	bpl.n	8003010 <__swrite+0x1e>
 8003004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003008:	2302      	movs	r3, #2
 800300a:	2200      	movs	r2, #0
 800300c:	f000 f83c 	bl	8003088 <_lseek_r>
 8003010:	89a3      	ldrh	r3, [r4, #12]
 8003012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800301a:	81a3      	strh	r3, [r4, #12]
 800301c:	4632      	mov	r2, r6
 800301e:	463b      	mov	r3, r7
 8003020:	4628      	mov	r0, r5
 8003022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003026:	f000 b853 	b.w	80030d0 <_write_r>

0800302a <__sseek>:
 800302a:	b510      	push	{r4, lr}
 800302c:	460c      	mov	r4, r1
 800302e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003032:	f000 f829 	bl	8003088 <_lseek_r>
 8003036:	1c43      	adds	r3, r0, #1
 8003038:	89a3      	ldrh	r3, [r4, #12]
 800303a:	bf15      	itete	ne
 800303c:	6560      	strne	r0, [r4, #84]	; 0x54
 800303e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003046:	81a3      	strheq	r3, [r4, #12]
 8003048:	bf18      	it	ne
 800304a:	81a3      	strhne	r3, [r4, #12]
 800304c:	bd10      	pop	{r4, pc}

0800304e <__sclose>:
 800304e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003052:	f000 b809 	b.w	8003068 <_close_r>

08003056 <memset>:
 8003056:	4402      	add	r2, r0
 8003058:	4603      	mov	r3, r0
 800305a:	4293      	cmp	r3, r2
 800305c:	d100      	bne.n	8003060 <memset+0xa>
 800305e:	4770      	bx	lr
 8003060:	f803 1b01 	strb.w	r1, [r3], #1
 8003064:	e7f9      	b.n	800305a <memset+0x4>
	...

08003068 <_close_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4d06      	ldr	r5, [pc, #24]	; (8003084 <_close_r+0x1c>)
 800306c:	2300      	movs	r3, #0
 800306e:	4604      	mov	r4, r0
 8003070:	4608      	mov	r0, r1
 8003072:	602b      	str	r3, [r5, #0]
 8003074:	f7fd fcdf 	bl	8000a36 <_close>
 8003078:	1c43      	adds	r3, r0, #1
 800307a:	d102      	bne.n	8003082 <_close_r+0x1a>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	b103      	cbz	r3, 8003082 <_close_r+0x1a>
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	bd38      	pop	{r3, r4, r5, pc}
 8003084:	20000308 	.word	0x20000308

08003088 <_lseek_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4d07      	ldr	r5, [pc, #28]	; (80030a8 <_lseek_r+0x20>)
 800308c:	4604      	mov	r4, r0
 800308e:	4608      	mov	r0, r1
 8003090:	4611      	mov	r1, r2
 8003092:	2200      	movs	r2, #0
 8003094:	602a      	str	r2, [r5, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	f7fd fcd9 	bl	8000a4e <_lseek>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_lseek_r+0x1e>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_lseek_r+0x1e>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	20000308 	.word	0x20000308

080030ac <_read_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4d07      	ldr	r5, [pc, #28]	; (80030cc <_read_r+0x20>)
 80030b0:	4604      	mov	r4, r0
 80030b2:	4608      	mov	r0, r1
 80030b4:	4611      	mov	r1, r2
 80030b6:	2200      	movs	r2, #0
 80030b8:	602a      	str	r2, [r5, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7fd fc82 	bl	80009c4 <_read>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d102      	bne.n	80030ca <_read_r+0x1e>
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	b103      	cbz	r3, 80030ca <_read_r+0x1e>
 80030c8:	6023      	str	r3, [r4, #0]
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
 80030cc:	20000308 	.word	0x20000308

080030d0 <_write_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4d07      	ldr	r5, [pc, #28]	; (80030f0 <_write_r+0x20>)
 80030d4:	4604      	mov	r4, r0
 80030d6:	4608      	mov	r0, r1
 80030d8:	4611      	mov	r1, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	602a      	str	r2, [r5, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7fd fc8d 	bl	80009fe <_write>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_write_r+0x1e>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_write_r+0x1e>
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	20000308 	.word	0x20000308

080030f4 <__libc_init_array>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	4d0d      	ldr	r5, [pc, #52]	; (800312c <__libc_init_array+0x38>)
 80030f8:	4c0d      	ldr	r4, [pc, #52]	; (8003130 <__libc_init_array+0x3c>)
 80030fa:	1b64      	subs	r4, r4, r5
 80030fc:	10a4      	asrs	r4, r4, #2
 80030fe:	2600      	movs	r6, #0
 8003100:	42a6      	cmp	r6, r4
 8003102:	d109      	bne.n	8003118 <__libc_init_array+0x24>
 8003104:	4d0b      	ldr	r5, [pc, #44]	; (8003134 <__libc_init_array+0x40>)
 8003106:	4c0c      	ldr	r4, [pc, #48]	; (8003138 <__libc_init_array+0x44>)
 8003108:	f000 f874 	bl	80031f4 <_init>
 800310c:	1b64      	subs	r4, r4, r5
 800310e:	10a4      	asrs	r4, r4, #2
 8003110:	2600      	movs	r6, #0
 8003112:	42a6      	cmp	r6, r4
 8003114:	d105      	bne.n	8003122 <__libc_init_array+0x2e>
 8003116:	bd70      	pop	{r4, r5, r6, pc}
 8003118:	f855 3b04 	ldr.w	r3, [r5], #4
 800311c:	4798      	blx	r3
 800311e:	3601      	adds	r6, #1
 8003120:	e7ee      	b.n	8003100 <__libc_init_array+0xc>
 8003122:	f855 3b04 	ldr.w	r3, [r5], #4
 8003126:	4798      	blx	r3
 8003128:	3601      	adds	r6, #1
 800312a:	e7f2      	b.n	8003112 <__libc_init_array+0x1e>
 800312c:	0800322c 	.word	0x0800322c
 8003130:	0800322c 	.word	0x0800322c
 8003134:	0800322c 	.word	0x0800322c
 8003138:	08003230 	.word	0x08003230

0800313c <__retarget_lock_init_recursive>:
 800313c:	4770      	bx	lr

0800313e <__retarget_lock_acquire_recursive>:
 800313e:	4770      	bx	lr

08003140 <__retarget_lock_release_recursive>:
 8003140:	4770      	bx	lr
	...

08003144 <_free_r>:
 8003144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003146:	2900      	cmp	r1, #0
 8003148:	d044      	beq.n	80031d4 <_free_r+0x90>
 800314a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800314e:	9001      	str	r0, [sp, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f1a1 0404 	sub.w	r4, r1, #4
 8003156:	bfb8      	it	lt
 8003158:	18e4      	addlt	r4, r4, r3
 800315a:	f000 f83f 	bl	80031dc <__malloc_lock>
 800315e:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <_free_r+0x94>)
 8003160:	9801      	ldr	r0, [sp, #4]
 8003162:	6813      	ldr	r3, [r2, #0]
 8003164:	b933      	cbnz	r3, 8003174 <_free_r+0x30>
 8003166:	6063      	str	r3, [r4, #4]
 8003168:	6014      	str	r4, [r2, #0]
 800316a:	b003      	add	sp, #12
 800316c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003170:	f000 b83a 	b.w	80031e8 <__malloc_unlock>
 8003174:	42a3      	cmp	r3, r4
 8003176:	d908      	bls.n	800318a <_free_r+0x46>
 8003178:	6825      	ldr	r5, [r4, #0]
 800317a:	1961      	adds	r1, r4, r5
 800317c:	428b      	cmp	r3, r1
 800317e:	bf01      	itttt	eq
 8003180:	6819      	ldreq	r1, [r3, #0]
 8003182:	685b      	ldreq	r3, [r3, #4]
 8003184:	1949      	addeq	r1, r1, r5
 8003186:	6021      	streq	r1, [r4, #0]
 8003188:	e7ed      	b.n	8003166 <_free_r+0x22>
 800318a:	461a      	mov	r2, r3
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	b10b      	cbz	r3, 8003194 <_free_r+0x50>
 8003190:	42a3      	cmp	r3, r4
 8003192:	d9fa      	bls.n	800318a <_free_r+0x46>
 8003194:	6811      	ldr	r1, [r2, #0]
 8003196:	1855      	adds	r5, r2, r1
 8003198:	42a5      	cmp	r5, r4
 800319a:	d10b      	bne.n	80031b4 <_free_r+0x70>
 800319c:	6824      	ldr	r4, [r4, #0]
 800319e:	4421      	add	r1, r4
 80031a0:	1854      	adds	r4, r2, r1
 80031a2:	42a3      	cmp	r3, r4
 80031a4:	6011      	str	r1, [r2, #0]
 80031a6:	d1e0      	bne.n	800316a <_free_r+0x26>
 80031a8:	681c      	ldr	r4, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	6053      	str	r3, [r2, #4]
 80031ae:	440c      	add	r4, r1
 80031b0:	6014      	str	r4, [r2, #0]
 80031b2:	e7da      	b.n	800316a <_free_r+0x26>
 80031b4:	d902      	bls.n	80031bc <_free_r+0x78>
 80031b6:	230c      	movs	r3, #12
 80031b8:	6003      	str	r3, [r0, #0]
 80031ba:	e7d6      	b.n	800316a <_free_r+0x26>
 80031bc:	6825      	ldr	r5, [r4, #0]
 80031be:	1961      	adds	r1, r4, r5
 80031c0:	428b      	cmp	r3, r1
 80031c2:	bf04      	itt	eq
 80031c4:	6819      	ldreq	r1, [r3, #0]
 80031c6:	685b      	ldreq	r3, [r3, #4]
 80031c8:	6063      	str	r3, [r4, #4]
 80031ca:	bf04      	itt	eq
 80031cc:	1949      	addeq	r1, r1, r5
 80031ce:	6021      	streq	r1, [r4, #0]
 80031d0:	6054      	str	r4, [r2, #4]
 80031d2:	e7ca      	b.n	800316a <_free_r+0x26>
 80031d4:	b003      	add	sp, #12
 80031d6:	bd30      	pop	{r4, r5, pc}
 80031d8:	20000310 	.word	0x20000310

080031dc <__malloc_lock>:
 80031dc:	4801      	ldr	r0, [pc, #4]	; (80031e4 <__malloc_lock+0x8>)
 80031de:	f7ff bfae 	b.w	800313e <__retarget_lock_acquire_recursive>
 80031e2:	bf00      	nop
 80031e4:	2000030c 	.word	0x2000030c

080031e8 <__malloc_unlock>:
 80031e8:	4801      	ldr	r0, [pc, #4]	; (80031f0 <__malloc_unlock+0x8>)
 80031ea:	f7ff bfa9 	b.w	8003140 <__retarget_lock_release_recursive>
 80031ee:	bf00      	nop
 80031f0:	2000030c 	.word	0x2000030c

080031f4 <_init>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr

08003200 <_fini>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	bf00      	nop
 8003204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003206:	bc08      	pop	{r3}
 8003208:	469e      	mov	lr, r3
 800320a:	4770      	bx	lr
